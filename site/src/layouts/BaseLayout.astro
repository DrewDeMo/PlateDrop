---
import Header from '@components/Header.astro';
import Footer from '@components/Footer.astro';
import SEO from '@components/SEO.astro';
import '@styles/global.css';

interface Props {
  title: string;
  description: string;
  image?: string;
  article?: boolean;
  publishedTime?: string;
  modifiedTime?: string;
  canonical?: string;
}

const {
  title,
  description,
  image,
  article = false,
  publishedTime,
  modifiedTime,
  canonical
} = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <SEO
      title={title}
      description={description}
      image={image}
      article={article}
      publishedTime={publishedTime}
      modifiedTime={modifiedTime}
      canonical={canonical}
    />
    
    <!-- Preconnect to external domains -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    
    <!-- Google Fonts - Inter with full weight range -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet" />
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="alternate icon" href="/favicon.ico" />
    
    <!-- RSS Feed -->
    <link rel="alternate" type="application/rss+xml" title="PlateDrop RSS Feed" href="/rss.xml" />
    
    <!-- Theme Color -->
    <meta name="theme-color" content="#ff6b35" />
    
    <!-- Viewport -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  </head>
  
  <body>
    <!-- Skip to main content link for accessibility -->
    <a href="#main-content" class="skip-link">Skip to main content</a>
    
    <Header />
    
    <main id="main-content">
      <slot />
    </main>
    
    <Footer />
    
    <!-- Scroll to top button -->
    <button id="scroll-to-top" class="scroll-to-top" aria-label="Scroll to top">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5">
        <path d="M12 19V5M5 12l7-7 7 7"/>
      </svg>
    </button>
  </body>
</html>

<style is:global>
  .skip-link {
    position: absolute;
    top: -100px;
    left: var(--space-4);
    background: var(--gradient-primary);
    color: white;
    padding: var(--space-3) var(--space-6);
    text-decoration: none;
    border-radius: var(--radius-full);
    z-index: 10000;
    font-weight: 700;
    box-shadow: var(--shadow-glow);
    transition: top var(--transition-base);
  }
  
  .skip-link:focus {
    top: var(--space-4);
  }
  
  main {
    min-height: 60vh;
    position: relative;
  }
  
  /* Scroll to top button */
  .scroll-to-top {
    position: fixed;
    bottom: var(--space-8);
    right: var(--space-8);
    width: 56px;
    height: 56px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--gradient-primary);
    color: white;
    border: none;
    border-radius: 50%;
    cursor: pointer;
    box-shadow: var(--shadow-glow), var(--shadow-xl);
    opacity: 0;
    visibility: hidden;
    transform: translateY(20px);
    transition: all var(--transition-base);
    z-index: 999;
  }
  
  .scroll-to-top.visible {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }
  
  .scroll-to-top:hover {
    transform: translateY(-4px) scale(1.05);
    box-shadow: var(--shadow-glow), var(--shadow-2xl);
  }
  
  .scroll-to-top:active {
    transform: translateY(-2px) scale(0.98);
  }
  
  @media (max-width: 768px) {
    .scroll-to-top {
      width: 48px;
      height: 48px;
      bottom: var(--space-6);
      right: var(--space-6);
    }
  }
</style>

<script>
  // Scroll to top functionality
  const scrollToTopBtn = document.getElementById('scroll-to-top');
  
  if (scrollToTopBtn) {
    // Show/hide button based on scroll position
    window.addEventListener('scroll', () => {
      if (window.scrollY > 500) {
        scrollToTopBtn.classList.add('visible');
      } else {
        scrollToTopBtn.classList.remove('visible');
      }
    });
    
    // Scroll to top when clicked
    scrollToTopBtn.addEventListener('click', () => {
      window.scrollTo({
        top: 0,
        behavior: 'smooth'
      });
    });
  }
  
  // Add smooth scroll behavior to all anchor links
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
      const href = this.getAttribute('href');
      if (href && href !== '#') {
        e.preventDefault();
        const target = document.querySelector(href);
        if (target) {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      }
    });
  });
  
  // Add intersection observer for fade-in animations
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  };
  
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('animate-fade-in');
        observer.unobserve(entry.target);
      }
    });
  }, observerOptions);
  
  // Observe elements with animation classes
  document.querySelectorAll('.feature-card, .category-card, .value-prop-card, .deal-wrapper').forEach(el => {
    observer.observe(el);
  });
</script>